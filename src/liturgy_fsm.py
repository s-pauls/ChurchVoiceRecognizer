import time
from dataclasses import dataclass
from typing import Dict, List, Optional, Callable

@dataclass
class StateTransition:
    """–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
    trigger_phrases: List[str]  # –§—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞—é—Ç –ø–µ—Ä–µ—Ö–æ–¥
    next_state: str
    action: Optional[Callable] = None
    increment_counter: bool = False

@dataclass
class BlockConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –ª–∏—Ç—É—Ä–≥–∏–∏"""
    name: str
    timeout: int  # –¢–∞–π–º–∞—É—Ç –±–ª–æ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    states: Dict[str, StateTransition]
    counter_limit: Optional[int] = None  # –õ–∏–º–∏—Ç —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–∞

class LiturgyFSM:
    def __init__(self, logger, blocks_config: Optional[Dict[str, BlockConfig]] = None):
        self.state = "START"
        self.current_block = None
        self.block_counter = 0
        self.block_start_time = None
        self.logger = logger
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–æ–≤
        self.blocks_config = blocks_config if blocks_config else self._get_default_config()

    def action_1(self):
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–û—Ç—á–µ –Ω–∞—à' + '–∏–º—è –¢–≤–æ–µ'")

    def action_2(self):
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π' –ø–æ—Å–ª–µ –º–æ–ª–∏—Ç–≤—ã")

    def start_block_timer(self, block_name: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        self.current_block = block_name
        self.block_start_time = time.time()
        self.block_counter = 0
        block_config = self.blocks_config.get(block_name)
        if block_config:
            print(f"üïê –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –±–ª–æ–∫–∞ '{block_config.name}' ({block_config.timeout}—Å)")

    def check_timeout(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞"""
        if not self.block_start_time or not self.current_block:
            return False
            
        block_config = self.blocks_config.get(self.current_block)
        if not block_config:
            return False
            
        elapsed_time = time.time() - self.block_start_time
        if elapsed_time > block_config.timeout:
            print(f"‚è±Ô∏è –¢–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫ –¥–ª—è –±–ª–æ–∫–∞ '{block_config.name}' ({elapsed_time:.1f}—Å)")
            self._handle_timeout()
            return True
        return False
    
    def _handle_timeout(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –±–ª–æ–∫–∞"""
        if self.current_block == "THIRD_HOUR":
            self.state = "THIRD_HOUR_END"
            print("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: THIRD_HOUR_END")
        elif self.current_block == "SIXTH_HOUR":
            self.state = "SIXTH_HOUR_END"
            print("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: SIXTH_HOUR_END")
        
        self.block_start_time = None
        self.current_block = None

    def process_phrase(self, phrase: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        phrase = phrase.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if self.check_timeout():
            return
            
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        transition = self._find_transition(phrase)
        if transition:
            self._execute_transition(transition)
    
    def _find_transition(self, phrase: str) -> Optional[StateTransition]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –±–ª–æ–∫–∞—Ö
        for block_name, block_config in self.blocks_config.items():
            state_transition = block_config.states.get(self.state)
            if state_transition and self._phrase_matches_triggers(phrase, state_transition.trigger_phrases):
                return state_transition
        return None
    
    def _phrase_matches_triggers(self, phrase: str, triggers: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ—Ä–∞–∑–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã"""
        return all(trigger.lower() in phrase for trigger in triggers)
    
    def _execute_transition(self, transition: StateTransition):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        old_state = self.state
        self.state = transition.next_state
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ
        if transition.action:
            transition.action()
            
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if transition.increment_counter:
            self.block_counter += 1
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._handle_special_states(old_state, transition.next_state)
        
        print(f"‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥: {old_state} ‚Üí {self.state}")
    
    def _handle_special_states(self, old_state: str, new_state: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–æ–≤
        if new_state == "THIRD_HOUR_STARTED":
            self.start_block_timer("THIRD_HOUR")
        elif new_state == "SIXTH_HOUR_STARTED":
            self.start_block_timer("SIXTH_HOUR")
            
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
        if new_state.endswith("_END"):
            self.block_start_time = None
            self.current_block = None

    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.state = "START"
        self.current_block = None
        self.block_counter = 0
        self.block_start_time = None
        print("üîÑ FSM —Å–±—Ä–æ—à–µ–Ω –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        
    def get_current_status(self) -> Dict[str, any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å FSM"""
        status = {
            "state": self.state,
            "current_block": self.current_block,
            "block_counter": self.block_counter,
            "block_start_time": self.block_start_time,
            "is_active": self.block_start_time is not None
        }
        
        if self.current_block and self.block_start_time:
            block_config = self.blocks_config.get(self.current_block)
            if block_config:
                elapsed = time.time() - self.block_start_time
                status["elapsed_time"] = elapsed
                status["remaining_time"] = max(0, block_config.timeout - elapsed)
                status["block_name"] = block_config.name
        
        return status
    
    def get_available_blocks(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤"""
        return list(self.blocks_config.keys())
    
    def update_block_timeout(self, block_name: str, new_timeout: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        if block_name in self.blocks_config:
            self.blocks_config[block_name].timeout = new_timeout
            print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω timeout –¥–ª—è –±–ª–æ–∫–∞ '{block_name}': {new_timeout}—Å")

    def _get_default_config(self) -> Dict[str, BlockConfig]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "THIRD_HOUR": BlockConfig(
                name="–¢—Ä–µ—Ç–∏–π —á–∞—Å",
                timeout=600,  # 10 –º–∏–Ω—É—Ç
                states={
                    "START": StateTransition(
                        trigger_phrases=["—Ü–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π"],
                        next_state="THIRD_HOUR_STARTED"
                    ),
                    "THIRD_HOUR_STARTED": StateTransition(
                        trigger_phrases=["–æ—Ç—á–µ –Ω–∞—à", "–∏–º—è —Ç–≤–æ–µ"],
                        next_state="THIRD_HOUR_OTCHE_1",
                        action=self.action_1,
                        increment_counter=True
                    ),
                    "THIRD_HOUR_OTCHE_1": StateTransition(
                        trigger_phrases=["–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π"],
                        next_state="THIRD_HOUR_WAIT_2",
                        action=self.action_2
                    ),
                    "THIRD_HOUR_WAIT_2": StateTransition(
                        trigger_phrases=["–æ—Ç—á–µ –Ω–∞—à", "–∏–º—è —Ç–≤–æ–µ"],
                        next_state="THIRD_HOUR_OTCHE_2",
                        action=self.action_1,
                        increment_counter=True
                    ),
                    "THIRD_HOUR_OTCHE_2": StateTransition(
                        trigger_phrases=["–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π"],
                        next_state="THIRD_HOUR_END",
                        action=self.action_2
                    )
                },
                counter_limit=2
            ),
            "SIXTH_HOUR": BlockConfig(
                name="–®–µ—Å—Ç–æ–π —á–∞—Å",
                timeout=480,  # 8 –º–∏–Ω—É—Ç
                states={
                    "THIRD_HOUR_END": StateTransition(
                        trigger_phrases=["—Ü–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π"],
                        next_state="SIXTH_HOUR_STARTED"
                    ),
                    "SIXTH_HOUR_STARTED": StateTransition(
                        trigger_phrases=["–æ—Ç—á–µ –Ω–∞—à", "–∏–º—è —Ç–≤–æ–µ"],
                        next_state="SIXTH_HOUR_OTCHE",
                        action=self.action_1
                    ),
                    "SIXTH_HOUR_OTCHE": StateTransition(
                        trigger_phrases=["–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π"],
                        next_state="SIXTH_HOUR_END",
                        action=self.action_2
                    )
                }
            )
        }


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ timeout'–∞–º–∏
    custom_config = {
        "THIRD_HOUR": BlockConfig(
            name="–¢—Ä–µ—Ç–∏–π —á–∞—Å (–±—ã—Å—Ç—Ä—ã–π)",
            timeout=30,  # –ö–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            states={
                "START": StateTransition(
                    trigger_phrases=["—Ü–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π"],
                    next_state="THIRD_HOUR_STARTED"
                ),
                "THIRD_HOUR_STARTED": StateTransition(
                    trigger_phrases=["–æ—Ç—á–µ –Ω–∞—à", "–∏–º—è —Ç–≤–æ–µ"],
                    next_state="THIRD_HOUR_OTCHE_1",
                    action=lambda: print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–û—Ç—á–µ –Ω–∞—à' + '–∏–º—è –¢–≤–æ–µ'"),
                    increment_counter=True
                ),
                "THIRD_HOUR_OTCHE_1": StateTransition(
                    trigger_phrases=["–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π"],
                    next_state="THIRD_HOUR_WAIT_2",
                    action=lambda: print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π' –ø–æ—Å–ª–µ –º–æ–ª–∏—Ç–≤—ã")
                ),
                "THIRD_HOUR_WAIT_2": StateTransition(
                    trigger_phrases=["–æ—Ç—á–µ –Ω–∞—à", "–∏–º—è —Ç–≤–æ–µ"],
                    next_state="THIRD_HOUR_OTCHE_2",
                    action=lambda: print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–û—Ç—á–µ –Ω–∞—à' + '–∏–º—è –¢–≤–æ–µ'"),
                    increment_counter=True
                ),
                "THIRD_HOUR_OTCHE_2": StateTransition(
                    trigger_phrases=["–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π"],
                    next_state="THIRD_HOUR_END",
                    action=lambda: print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π' –ø–æ—Å–ª–µ –º–æ–ª–∏—Ç–≤—ã")
                )
            },
            counter_limit=2
        ),
        "SIXTH_HOUR": BlockConfig(
            name="–®–µ—Å—Ç–æ–π —á–∞—Å (–∫–æ—Ä–æ—Ç–∫–∏–π)",
            timeout=20,  # –ï—â–µ –∫–æ—Ä–æ—á–µ
            states={
                "THIRD_HOUR_END": StateTransition(
                    trigger_phrases=["—Ü–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π"],
                    next_state="SIXTH_HOUR_STARTED"
                ),
                "SIXTH_HOUR_STARTED": StateTransition(
                    trigger_phrases=["–æ—Ç—á–µ –Ω–∞—à", "–∏–º—è —Ç–≤–æ–µ"],
                    next_state="SIXTH_HOUR_OTCHE",
                    action=lambda: print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–û—Ç—á–µ –Ω–∞—à' + '–∏–º—è –¢–≤–æ–µ'")
                ),
                "SIXTH_HOUR_OTCHE": StateTransition(
                    trigger_phrases=["–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π"],
                    next_state="SIXTH_HOUR_END",
                    action=lambda: print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π' –ø–æ—Å–ª–µ –º–æ–ª–∏—Ç–≤—ã")
                )
            }
        )
    }

    # –°–æ–∑–¥–∞–µ–º FSM —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    fsm = LiturgyFSM(None, custom_config)
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ LiturgyFSM")
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–æ–∫–∏: {fsm.get_available_blocks()}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    phrases = [
        ("–¶–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π", 0),
        ("–°–≤—è—Ç—ã–π –ë–æ–∂–µ", 1),
        ("–°–≤—è—Ç—ã–π –ö—Ä–µ–ø–∫–∏–π", 1),
        ("–û—Ç—á–µ –Ω–∞—à, –¥–∞ —Å–≤—è—Ç–∏—Ç—Å—è –∏–º—è –¢–≤–æ–µ", 2),
        ("–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π", 1),
        ("–û—Ç—á–µ –Ω–∞—à, –¥–∞ —Å–≤—è—Ç–∏—Ç—Å—è –∏–º—è –¢–≤–æ–µ", 2),
        ("–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π", 1),
        ("–¶–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π", 3),
        ("–°–≤—è—Ç—ã–π –ë–æ–∂–µ", 1),
        ("–û—Ç—á–µ –Ω–∞—à, –¥–∞ —Å–≤—è—Ç–∏—Ç—Å—è –∏–º—è –¢–≤–æ–µ", 2),
        ("–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π", 1)
    ]

    for i, (phrase, delay) in enumerate(phrases):
        time.sleep(delay)
        print(f"\n--- –§—Ä–∞–∑–∞ {i+1}: '{phrase}' ---")
        fsm.process_phrase(phrase)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = fsm.get_current_status()
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status['state']}")
        if status['current_block']:
            print(f"üïê –ë–ª–æ–∫: {status.get('block_name', status['current_block'])}")
            print(f"‚è±Ô∏è –û—Å—Ç–∞–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏: {status.get('remaining_time', 0):.1f}—Å")
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")