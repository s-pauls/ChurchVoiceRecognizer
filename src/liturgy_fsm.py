import time

class LiturgyFSM:
    def __init__(self, logger):
        self.state = "START"
        self.otche_count = 0
        self.block_start_time = None
        self.block_timeout = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.logger=logger

    def action_1(self):
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–û—Ç—á–µ –Ω–∞—à' + '–∏–º—è –¢–≤–æ–µ'")

    def action_2(self):
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ '–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π' –ø–æ—Å–ª–µ –º–æ–ª–∏—Ç–≤—ã")

    def start_block_timer(self):
        self.block_start_time = time.time()

    def check_timeout(self):
        if self.block_start_time and (time.time() - self.block_start_time > self.block_timeout):
            print("‚è±Ô∏è –¢–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É.")
            if self.state.startswith("THIRD_HOUR"):
                self.state = "THIRD_HOUR_END"
                print("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: THIRD_HOUR_END")
            elif self.state.startswith("SIXTH_HOUR"):
                self.state = "SIXTH_HOUR_END"
                print("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: SIXTH_HOUR_END")
            self.block_start_time = None

    def process_phrase(self, phrase):
        phrase = phrase.lower()
        self.check_timeout()

        if self.state == "START":
            if "—Ü–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π" in phrase:
                self.state = "THIRD_HOUR_START"
                self.otche_count = 0
                self.start_block_timer()
                print("‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: THIRD_HOUR_START")

        elif self.state == "THIRD_HOUR_START":
            if "–æ—Ç—á–µ –Ω–∞—à" in phrase and "–∏–º—è —Ç–≤–æ–µ" in phrase:
                self.otche_count += 1
                self.action_1()
                if self.otche_count == 1:
                    self.state = "THIRD_HOUR_OTCHE_1"
                elif self.otche_count == 2:
                    self.state = "THIRD_HOUR_OTCHE_2"
                print(f"‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.state}")

        elif self.state == "THIRD_HOUR_OTCHE_1":
            if "–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π" in phrase:
                self.action_2()

        elif self.state == "THIRD_HOUR_OTCHE_2":
            if "–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π" in phrase:
                self.action_2()
                self.state = "THIRD_HOUR_END"
                self.block_start_time = None
                print("‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: THIRD_HOUR_END")

        elif self.state == "THIRD_HOUR_END":
            if "—Ü–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π" in phrase:
                self.state = "SIXTH_HOUR_START"
                self.start_block_timer()
                print("‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: SIXTH_HOUR_START")

        elif self.state == "SIXTH_HOUR_START":
            if "–æ—Ç—á–µ –Ω–∞—à" in phrase and "–∏–º—è —Ç–≤–æ–µ" in phrase:
                self.action_1()
                self.state = "SIXTH_HOUR_OTCHE"
                print("‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: SIXTH_HOUR_OTCHE")

        elif self.state == "SIXTH_HOUR_OTCHE":
            if "–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π" in phrase:
                self.action_2()
                self.state = "SIXTH_HOUR_END"
                self.block_start_time = None
                print("‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: SIXTH_HOUR_END")

    def reset(self):
        self.state = "START"
        self.otche_count = 0
        self.block_start_time = None
        print("üîÑ FSM —Å–±—Ä–æ—à–µ–Ω –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
fsm = LiturgyFSM()

# –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
phrases = [
    ("–¶–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π", 0),
    ("–°–≤—è—Ç—ã–π –ë–æ–∂–µ", 2),
    ("–°–≤—è—Ç—ã–π –ö—Ä–µ–ø–∫–∏–π", 2),
    ("–û—Ç—á–µ –Ω–∞—à, –¥–∞ —Å–≤—è—Ç–∏—Ç—Å—è –∏–º—è –¢–≤–æ–µ", 3),
    ("–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π", 2),
    ("–û—Ç—á–µ –Ω–∞—à, –¥–∞ —Å–≤—è—Ç–∏—Ç—Å—è –∏–º—è –¢–≤–æ–µ", 3),
    ("–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π", 2),
    ("–¶–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π", 5),
    ("–°–≤—è—Ç—ã–π –ë–æ–∂–µ", 2),
    ("–û—Ç—á–µ –Ω–∞—à, –¥–∞ —Å–≤—è—Ç–∏—Ç—Å—è –∏–º—è –¢–≤–æ–µ", 3),
    ("–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π", 2)
]

for phrase, delay in phrases:
    time.sleep(delay)
    fsm.process_phrase(phrase)