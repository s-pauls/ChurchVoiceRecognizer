"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import tkinter as tk
from tkinter import ttk, messagebox
from audio_device import list_input_devices
from settings import load_settings


class SettingsDialog:
    def __init__(self, parent=None, saved_device_name=None):
        self.result = None
        self.selected_device_id = None
        self.selected_device_name = None
        self.selected_service = None
        self.saved_device_name = saved_device_name
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.saved_settings = load_settings()
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root = tk.Toplevel(parent) if parent else tk.Tk()
        self.root.title("üéôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª—É–∂–±—ã")
        self.root.geometry("450x340")
        self.root.resizable(False, False)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.root.transient(parent)
        self.root.grab_set()
        
        self.setup_ui()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        pos_x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        pos_y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{pos_x}+{pos_y}")
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root)
        title_frame.pack(pady=10)
        
        title_label = ttk.Label(
            title_frame, 
            text="‚õ™ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏",
            font=("Arial", 14, "bold")
        )
        title_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(padx=15, pady=15, fill="both", expand=True)
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–ª—É–∂–±—ã
        service_frame = ttk.LabelFrame(main_frame, text="üìú –¢–∏–ø —Å–ª—É–∂–±—ã", padding=10)
        service_frame.pack(fill="x", pady=(0, 15))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–ª—É–∂–±—ã
        saved_service = "–ª–∏—Ç—É—Ä–≥–∏—è"
        self.service_var = tk.StringVar(value=saved_service)

        ttk.Radiobutton(
            service_frame, 
            text="üïäÔ∏è –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –õ–∏—Ç—É—Ä–≥–∏—è",
            variable=self.service_var,
            value="–ª–∏—Ç—É—Ä–≥–∏—è"
        ).pack(anchor="w", pady=2)
        
        ttk.Radiobutton(
            service_frame, 
            text="üåü –í—Å–µ–Ω–æ—â–Ω–æ–µ –±–¥–µ–Ω–∏–µ", 
            variable=self.service_var,
            value="–≤—Å–µ–Ω–æ—â–Ω–∞—è"
        ).pack(anchor="w", pady=2)
        
        # –í—ã–±–æ—Ä –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_frame = ttk.LabelFrame(main_frame, text="üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω", padding=10)
        device_frame.pack(fill="x", pady=(0, 15))
        
        ttk.Label(device_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏:").pack(anchor="w", pady=(0, 5))
        
        self.device_var = tk.StringVar()
        self.device_combo = ttk.Combobox(
            device_frame, 
            textvariable=self.device_var, 
            state="readonly",
            width=50
        )
        self.device_combo.pack(fill="x", pady=(0, 5))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.load_audio_devices()
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        refresh_btn = ttk.Button(
            device_frame, 
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
            command=self.load_audio_devices
        )
        refresh_btn.pack(anchor="e", pady=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill="x", pady=(0, 0))
        
        ttk.Button(
            button_frame, 
            text="‚ùå –û—Ç–º–µ–Ω–∞", 
            command=self.cancel
        ).pack(side="right", padx=(10, 0))
        
        ttk.Button(
            button_frame, 
            text="‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É", 
            command=self.ok,
            style="Accent.TButton"
        ).pack(side="right")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ OK
        self.root.bind('<Return>', lambda e: self.ok())
        self.root.bind('<Escape>', lambda e: self.cancel())
        
    def load_audio_devices(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:

            device_options = []

            for index, name in list_input_devices().items():
                device_options.append(f"{index}: {name}")
            
            self.device_combo['values'] = device_options
            
            if device_options:
                # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
                selected_index = 0
                if self.saved_device_name is not None:
                    for idx, option in enumerate(device_options):
                        if option.endswith(self.saved_device_name):
                            selected_index = idx
                            break
                
                self.device_combo.current(selected_index)
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n{e}")
            
    def ok(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ OK"""
        if not self.device_var.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω")
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "index: name"
        device_text = self.device_var.get()
        try:
            self.selected_device_id = int(device_text.split(':')[0])
            self.selected_device_name = device_text.split(':')[1].strip()
            self.selected_service = self.service_var.get()
            self.result = True
            self.root.destroy()
        except (ValueError, IndexError):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            
    def cancel(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞"""
        self.result = False
        self.root.destroy()
        
    def show(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        self.root.focus_set()
        self.root.wait_window()
        return self.result


def show_settings_dialog(saved_device_name=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (device_index, service_type)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ
    """
    dialog = SettingsDialog(saved_device_name=saved_device_name)
    if dialog.show():
        return dialog.selected_device_id, dialog.selected_device_name, dialog.selected_service
    return None


if __name__ == "__main__":
    # –¢–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    result = show_settings_dialog()
    if result:
        device_index, device_name, service_type = result
        print(f"–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_index} - {device_name}, —Å–ª—É–∂–±–∞: {service_type}")
    else:
        print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")