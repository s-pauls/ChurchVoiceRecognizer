import time
from typing import Dict, List, Optional
from enum import Enum
from processors.liturgy_fsm_config import get_default_config, StateTransition


class StateExecutionPhase(Enum):
    """–§–∞–∑—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    READY = "ready"  # –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ—Ä–∞–∑
    ON_BEGIN_DELAY = "on_begin_delay"  # –û–∂–∏–¥–∞–Ω–∏–µ onBeginDelaySeconds
    ON_BEGIN_ACTION = "on_begin_action"  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ onBeginAction
    AFTER_ACTION_SLEEP = "after_action_sleep"  # –û–∂–∏–¥–∞–Ω–∏–µ sleepTimeout
    AFTER_SLEEP_ACTION = "after_sleep_action"  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ afterSleepAction


class LiturgyFSM:
    def __init__(self, logger, states_config: Optional[Dict[str, StateTransition]] = None):
        self.current_state_name: str = "START"
        self.current_state : Optional[StateTransition] = None
        self.state_start_time = time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.logger = logger
        
        # –§–∞–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.execution_phase = StateExecutionPhase.READY
        self.phase_start_time = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–æ–≤
        self.states_config = states_config if states_config else get_default_config()

    def process_phrase(self, phrase: str) -> bool:
        phrase_lower = phrase.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if self._check_state_timeout():
            return False  # –ü—Ä–æ–∏–∑–æ—à–µ–ª timeout –ø–µ—Ä–µ—Ö–æ–¥
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∑–∞–¥–µ—Ä–∂–∫–∏/–¥–µ–π—Å—Ç–≤–∏—è)
        if self._execute_state_phases_if_not_busy():
            return False
            
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        transition, next_state, matched_trigger = self._find_transition(phrase_lower)
        if transition:
            self._execute_transition(transition, next_state, matched_trigger)
            return True

        return False

    def _execute_state_phases_if_not_busy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∑–∞–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è)"""
        if self.execution_phase == StateExecutionPhase.READY:
            return False
            
        state_config = self.states_config.get(self.current_state_name)
        if not state_config or not self.phase_start_time:
            return False

        current_time = time.time()
        elapsed_time = current_time - self.phase_start_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É
        if self.execution_phase == StateExecutionPhase.ON_BEGIN_DELAY:
            if state_config.onBeginDelaySeconds and elapsed_time < state_config.onBeginDelaySeconds:
                # self.logger.info(f"‚è≥ onBeginDelay –¥–ª—è '{self.current_state_name}' "
                #               f"({int(elapsed_time)}/{state_config.onBeginDelaySeconds}—Å)")
                return True
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é onBeginAction
                self._execute_on_begin_action()
                return True
                
        elif self.execution_phase == StateExecutionPhase.AFTER_ACTION_SLEEP:
            if state_config.afterActionSleepSeconds and elapsed_time < state_config.afterActionSleepSeconds:
                # if int(elapsed_time)==0 or int(elapsed_time)==state_config.sleepTimeout:
                #    self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è '{self.current_state_name}' "
                #               f"({state_config.sleepTimeout}—Å)")
                return True
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é afterSleepAction
                self._execute_after_sleep_action()
                return True
                
        return False

    def _check_state_timeout(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ timeout –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        state_config = self.states_config.get(self.current_state_name)
        if not state_config or not state_config.timeoutSeconds or not self.state_start_time:
            return False
            
        current_time = time.time()
        elapsed_time = current_time - self.state_start_time

        if elapsed_time >= state_config.timeoutSeconds:
            self.logger.info(f"‚è∞ Timeout –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{self.current_state_name}' "
                           f"({int(elapsed_time)}/{state_config.timeoutSeconds}—Å)")
            
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
            if state_config.transitions:
                first_transition = state_config.transitions[0]
                if first_transition.next_state:
                    self.logger.info(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ timeout: {self.current_state_name} ‚Üí {first_transition.next_state}")
                    self._execute_transition(state_config, first_transition.next_state, "timeout")
                    return True
            
        return False

    def _execute_on_begin_action(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç onBeginAction –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ"""
        state_config = self.states_config.get(self.current_state_name)
        if not state_config:
            self._set_phase(StateExecutionPhase.READY)
            return
            
        self.execution_phase = StateExecutionPhase.ON_BEGIN_ACTION
        
        if state_config.onBeginAction:
            self.logger.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ onBeginAction –¥–ª—è '{self.current_state_name}'")
            state_config.onBeginAction()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ sleepTimeout –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        if state_config.afterActionSleepSeconds and state_config.afterActionSleepSeconds > 0:
            self.logger.info(
                f"üïê –ó–∞–ø—É—â–µ–Ω afterActionSleep –¥–ª—è '{self.current_state_name}' ({state_config.afterActionSleepSeconds}—Å)")
            self._set_phase(StateExecutionPhase.AFTER_ACTION_SLEEP)
        else:
            self._execute_after_sleep_action()

    def _execute_after_sleep_action(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç afterSleepAction –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        state_config = self.states_config.get(self.current_state_name)
        if not state_config:
            self._set_phase(StateExecutionPhase.READY)
            return
            
        self.execution_phase = StateExecutionPhase.AFTER_SLEEP_ACTION
        
        if state_config.afterSleepAction:
            self.logger.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ afterSleepAction –¥–ª—è '{self.current_state_name}'")
            state_config.afterSleepAction()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._set_phase(StateExecutionPhase.READY)

    def _set_phase(self, phase: StateExecutionPhase):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ñ–∞–∑—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.execution_phase = phase
        self.phase_start_time = time.time() if phase != StateExecutionPhase.READY else None


    def _find_transition(self, phrase: str) -> tuple[Optional[StateTransition], Optional[str], Optional[str]]:
        state_transition = self.states_config.get(self.current_state_name)
        if state_transition:
            for transition in state_transition.transitions:
                found, matched_trigger = self._phrase_matches_triggers(phrase, transition.trigger_phrases)
                if found:
                    return state_transition, transition.next_state, matched_trigger
        return None, None, None
    
    @staticmethod
    def _phrase_matches_triggers(phrase: str, triggers: List[str]) -> tuple[bool, Optional[str]]:
        for trigger in triggers:
            if trigger.lower() in phrase:
                return True, trigger
        return False, None

    def _execute_transition(self, transition: StateTransition, next_state: str, trigger: str):
        old_state = self.current_state_name
        self.current_state_name = next_state
        self.state_start_time = time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        state_config = self.states_config.get(self.current_state_name)
        if state_config:
            self.current_state = state_config

        self.logger.info(f"‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥: {old_state} ‚Üí {self.current_state_name} –ø–æ —Ñ—Ä–∞–∑–µ: '{trigger}'")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._start_state_execution()

    def _start_state_execution(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        state_config = self.states_config.get(self.current_state_name)
        if not state_config:
            self._set_phase(StateExecutionPhase.READY)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ onBeginDelaySeconds
        if state_config.onBeginDelaySeconds and state_config.onBeginDelaySeconds > 0:
            self.logger.info(f"üïê –ó–∞–ø—É—â–µ–Ω onBeginDelay –¥–ª—è '{self.current_state_name}' ({state_config.onBeginDelaySeconds}—Å)")
            self._set_phase(StateExecutionPhase.ON_BEGIN_DELAY)
        else:
            # –ï—Å–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–µ—Ç, —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º onBeginAction
            self._execute_on_begin_action()

    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.current_state_name = "START"
        self.current_state = None
        self.state_start_time = time.time()  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
        self.execution_phase = StateExecutionPhase.READY
        self.phase_start_time = None
        print("üîÑ FSM —Å–±—Ä–æ—à–µ–Ω –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
