import time
from typing import Dict, List, Optional
from src.processors.liturgy_fsm_config import get_default_config, StateTransition


class LiturgyFSM:
    def __init__(self, logger, states_config: Optional[Dict[str, StateTransition]] = None):
        self.current_state_name: str = "START"
        self.current_state : Optional[StateTransition] = None
        self.state_start_time = None
        self.logger = logger
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–æ–≤
        self.states_config = states_config if states_config else get_default_config()

    def wait_timeout(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞"""
        if not self.state_start_time or not self.current_state:
            return False
            
        state_config = self.states_config.get(self.current_state_name)
        if not state_config:
            return False

        elapsed_time = time.time() - self.state_start_time
        if state_config.onBeginDelaySeconds and elapsed_time < state_config.onBeginDelaySeconds:
            self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ –±–ª–æ–∫–∞ "f"'{self.current_state_name}' "
                             f"({int(elapsed_time)}/{state_config.onBeginDelaySeconds}—Å)")
            return True
        return False

    def process_phrase(self, phrase: str) -> bool:
        phrase_lower = phrase.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if self.wait_timeout():
            return False
            
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        transition, next_state = self._find_transition(phrase_lower)
        if transition:
            self._execute_transition(transition, next_state)
            return True
        else:
            pass
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –µ—Å–ª–∏ –º—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥
            # self._check_recovery_transitions(phrase_lower)

        return False

    def _find_transition(self, phrase: str) -> Optional[StateTransition, str]:
        state_transition = self.states_config.get(self.current_state_name)
        if state_transition:
            for transition in state_transition.transitions:
                if self._phrase_matches_triggers(phrase, transition.trigger_phrases):
                    return state_transition, transition.next_state
        return None, None
    
    @staticmethod
    def _phrase_matches_triggers(phrase: str, triggers: List[str]) -> bool:
        return any(trigger.lower() in phrase for trigger in triggers)

    def _execute_transition(self, transition: StateTransition, next_state: str):
        old_state = self.current_state_name
        self.current_state_name = next_state

        state_config = self.states_config.get(self.current_state_name)
        if state_config:
            self.current_state = state_config

        self.logger.info(f"‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥: {old_state} ‚Üí {self.current_state_name}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ
        if transition.onBeginAction:
            self.logger.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{self.current_state_name}'")
            transition.onBeginAction()

        if transition.afterSleepAction:
            self.logger.info(f"‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{self.current_state_name}'")
            transition.afterSleepAction()

        self.start_state_timer(self.current_state_name, state_config)
    
    def start_state_timer(self, state_name: str, state: StateTransition):
        if state and state.onBeginDelaySeconds and state.onBeginDelaySeconds > 0:
            self.state_start_time = time.time()
            self.logger.info(f"üïê –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state_name}' ({state.onBeginDelaySeconds}—Å)")

    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.current_state_name = "START"
        self.current_state = None
        self.state_start_time = None
        print("üîÑ FSM —Å–±—Ä–æ—à–µ–Ω –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
