import time
from dataclasses import dataclass
from typing import Dict, List, Optional, Callable

@dataclass
class StateTransition:
    """–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
    trigger_phrases: List[str]  # –§—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞—é—Ç –ø–µ—Ä–µ—Ö–æ–¥
    next_state: str
    timeout: Optional[int] = None # –¢–∞–π–º–∞—É—Ç –±–ª–æ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    action: Optional[Callable] = None

class LiturgyFSM:
    def __init__(self, logger, states_config: Optional[Dict[str, StateTransition]] = None):
        self.current_state_name: str = "START"
        self.current_state : Optional[StateTransition] = None
        self.state_start_time = None
        self.logger = logger
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–æ–≤
        self.states_config = states_config if states_config else self._get_default_config()

    def action_altar_and_reader(self):
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ê–ª—Ç–∞—Ä—å + –ß—Ç–µ—Ü")

    def action_reader_only(self):
        print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –¢–æ–ª—å–∫–æ —á—Ç–µ—Ü")

    def check_timeout(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞"""
        if not self.state_start_time or not self.current_state:
            return False
            
        state_config = self.states_config.get(self.current_state_name)
        if not state_config:
            return False

        elapsed_time = time.time() - self.state_start_time
        if elapsed_time > state_config.timeout:
            print(f"‚è±Ô∏è –¢–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫ –¥–ª—è –±–ª–æ–∫–∞ '{self.current_state_name}' ({elapsed_time:.1f}—Å)")
            self._handle_timeout()
            return True
        return False
    
    def _handle_timeout(self):
        if self.current_state.next_state:
            self.current_state_name = self.current_state.next_state
            print(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.current_state.next_state}")

        self.state_start_time = None
        self.current_state = None

    def process_phrase(self, phrase: str):
        phrase_lower = phrase.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if self.check_timeout():
            return
            
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        transition = self._find_transition(phrase_lower)
        if transition:
            self._execute_transition(transition)
    
    def _find_transition(self, phrase: str) -> Optional[StateTransition]:
        state_transition = self.states_config.get(self.current_state_name)
        if state_transition and self._phrase_matches_triggers(phrase, state_transition.trigger_phrases):
            return state_transition
        return None
    
    def _phrase_matches_triggers(self, phrase: str, triggers: List[str]) -> bool:
        return any(trigger.lower() in phrase for trigger in triggers)
    
    def _execute_transition(self, transition: StateTransition):
        old_state = self.current_state_name
        self.current_state_name = transition.next_state

        state_config = self.states_config.get(self.current_state_name)
        if state_config:
            self.current_state = state_config

        self.start_state_timer(self.current_state_name, state_config)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ
        if transition.action:
            transition.action()

        print(f"‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥: {old_state} ‚Üí {self.current_state_name}")
    
    def start_state_timer(self, state_name: str, state: StateTransition):
        if state and state.timeout and state.timeout > 0:
            self.state_start_time = time.time()
            print(f"üïê –ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –±–ª–æ–∫–∞ '{state_name}' ({state.timeout}—Å)")

    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.current_state_name = "START"
        self.current_state = None
        self.state_start_time = None
        print("üîÑ FSM —Å–±—Ä–æ—à–µ–Ω –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

    def _get_default_config(self) -> Dict[str, StateTransition]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–ª–æ–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "START": StateTransition(
                trigger_phrases=["—Å–ª–∞–≤–∞ —Ç–µ–±–µ –±–æ–∂–µ –Ω–∞—à", "—Ü–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π", "–ø—Ä–∏–¥–∏", "–∏ –æ—á–∏—Å—Ç–∏", "–∫—Ä–µ–ø–∫–∏–π", "–ø–æ–º–∏–ª—É–π –Ω–∞—Å"],
                next_state="THIRD_HOUR_STARTED"
            ),
            "THIRD_HOUR_STARTED": StateTransition(
                trigger_phrases=["–æ—Ç—á–µ –Ω–∞—à", "–∏–º—è —Ç–≤–æ–µ", "—Ü–∞—Ä—Å—Ç–≤–∏–µ —Ç–≤–æ–µ", "–¥–æ–ª–≥–∏ –Ω–∞—à"],
                next_state="THIRD_HOUR_OTCHE_1",
                action=self.action_altar_and_reader,
            ),
            "THIRD_HOUR_OTCHE_1": StateTransition(
                trigger_phrases=["–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π"],
                next_state="THIRD_HOUR_WAIT_2",
                action=self.action_reader_only
            ),
            "THIRD_HOUR_WAIT_2": StateTransition(
                trigger_phrases=["–æ—Ç—á–µ –Ω–∞—à", "–∏–º—è —Ç–≤–æ–µ", "—Ü–∞—Ä—Å—Ç–≤–∏–µ —Ç–≤–æ–µ", "–¥–æ–ª–≥–∏ –Ω–∞—à"],
                next_state="THIRD_HOUR_OTCHE_2",
                action=self.action_altar_and_reader,
            ),
            "THIRD_HOUR_OTCHE_2": StateTransition(
                trigger_phrases=["–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π"],
                next_state="THIRD_HOUR_END",
                action=self.action_reader_only
            ),
            "THIRD_HOUR_END": StateTransition(
                trigger_phrases=["—Å–ª–∞–≤–∞ —Ç–µ–±–µ –±–æ–∂–µ –Ω–∞—à", "—Ü–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π", "–ø—Ä–∏–¥–∏", "–∏ –æ—á–∏—Å—Ç–∏", "–∫—Ä–µ–ø–∫–∏–π", "–ø–æ–º–∏–ª—É–π –Ω–∞—Å"],
                next_state="SIXTH_HOUR_STARTED"
            ),
            "SIXTH_HOUR_STARTED": StateTransition(
                trigger_phrases=["–æ—Ç—á–µ –Ω–∞—à", "–∏–º—è —Ç–≤–æ–µ", "—Ü–∞—Ä—Å—Ç–≤–∏–µ —Ç–≤–æ–µ", "–¥–æ–ª–≥–∏ –Ω–∞—à"],
                next_state="SIXTH_HOUR_OTCHE",
                action=self.action_altar_and_reader
            ),
            "SIXTH_HOUR_OTCHE": StateTransition(
                trigger_phrases=["–≥–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π"],
                next_state="SIXTH_HOUR_END",
                action=self.action_reader_only
            )
        }