"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã VoiceRecognizer
–±–µ–∑ –∂–µ—Å—Ç–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""
import time
from recognizer import VoiceRecognizer
from phrase_processors import SERVICE_PROCESSORS, SimpleKeywordProcessor
from logger import setup_logger


def test_phrase_processors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—Ä–∞–∑."""
    logger = setup_logger()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ—Ä–∞–∑\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    test_phrases = [
        "–¶–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π —É—Ç–µ—à–∏—Ç–µ–ª—é",
        "–û—Ç—á–µ –Ω–∞—à, –¥–∞ —Å–≤—è—Ç–∏—Ç—Å—è –∏–º—è –¢–≤–æ–µ",
        "–ì–æ—Å–ø–æ–¥–∏ –ø–æ–º–∏–ª—É–π",
        "–°–≤—è—Ç—ã–π –ë–æ–∂–µ, –°–≤—è—Ç—ã–π –ö—Ä–µ–ø–∫–∏–π",
        "–ë–ª–∞–≥–æ—Å–ª–æ–≤–∏ –¥—É—à–µ –º–æ—è –ì–æ—Å–ø–æ–¥–∞",
        "–°–≤–µ—Ç–µ —Ç–∏—Ö–∏–π —Å–≤—è—Ç—ã—è —Å–ª–∞–≤—ã",
        "–ê–ª–ª–∏–ª—É–π—è, –∞–ª–ª–∏–ª—É–π—è, –∞–ª–ª–∏–ª—É–π—è"
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    for service_name, processor_factory in SERVICE_PROCESSORS.items():
        print(f"--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {service_name.upper()} ---")
        processor = processor_factory(logger)
        
        for phrase in test_phrases:
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: '{phrase}'")
            processor(phrase)
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        
        print()


def test_custom_processor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞."""
    logger = setup_logger()
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    custom_keywords = ["–∞–º–∏–Ω—å", "—Å–ª–∞–≤–∞", "—á–µ—Å—Ç—å", "–±–ª–∞–≥–æ–¥–∞—Ç—å"]
    keyword_processor = SimpleKeywordProcessor(logger, custom_keywords)
    
    test_phrases = [
        "–°–ª–∞–≤–∞ –û—Ç—Ü—É –∏ –°—ã–Ω—É –∏ –°–≤—è—Ç–æ–º—É –î—É—Ö—É",
        "–ò –Ω—ã–Ω–µ –∏ –ø—Ä–∏—Å–Ω–æ –∏ –≤–æ –≤–µ–∫–∏ –≤–µ–∫–æ–≤, –∞–º–∏–Ω—å",
        "–ë–ª–∞–≥–æ–¥–∞—Ç—å –ì–æ—Å–ø–æ–¥–∞ –Ω–∞—à–µ–≥–æ",
        "–ß–µ—Å—Ç—å –∏ –ø–æ–∫–ª–æ–Ω–µ–Ω–∏–µ –¢—Ä–æ–∏—Ü–µ"
    ]
    
    for phrase in test_phrases:
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: '{phrase}'")
        keyword_processor.process_phrase(phrase)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {keyword_processor.get_statistics()}")


def test_voice_recognizer_flexibility():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–∏–±–∫–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ VoiceRecognizer."""
    logger = setup_logger()
    
    print("üé§ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–∏–±–∫–æ—Å—Ç–∏ VoiceRecognizer\n")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–æ–∫-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processed_phrases = []
    
    def mock_processor(text: str):
        processed_phrases.append(text)
        print(f"üìù –ú–æ–∫-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª: '{text}'")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ VoiceRecognizer —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
    # (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API)
    print("–°–æ–∑–¥–∞–Ω–∏–µ VoiceRecognizer —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º...")
    
    try:
        # –≠—Ç–æ –±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–æ–¥–µ–ª–∏ –∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        # recognizer = VoiceRecognizer(
        #     model_path="path/to/model",
        #     device_index=0,
        #     logger=logger,
        #     phrase_processor=mock_processor
        # )
        print("‚úÖ VoiceRecognizer –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —Å –ª—é–±—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º!")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–º–µ–Ω—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        liturgy_processor = SERVICE_PROCESSORS["–ª–∏—Ç—É—Ä–≥–∏—è"](logger)
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ—Ä–∞–∑
        test_phrases = ["–¶–∞—Ä—é –Ω–µ–±–µ—Å–Ω—ã–π", "–û—Ç—á–µ –Ω–∞—à"]
        for phrase in test_phrases:
            mock_processor(phrase)
            liturgy_processor(phrase)
        
        print(f"\nüìã –ú–æ–∫-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª {len(processed_phrases)} —Ñ—Ä–∞–∑")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")
        print("–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ.")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n")
    
    test_phrase_processors()
    print("="*60)
    
    test_custom_processor()
    print("="*60)
    
    test_voice_recognizer_flexibility()
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")